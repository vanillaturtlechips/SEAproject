name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ main ] # main 브랜치에 푸시될 때 실행

env:
  DOCKER_IMAGE_NAME: your-dockerhub-username/simple-node-app # Docker Hub 사용자 이름으로 변경
  KUBE_CONFIG_REPO: your-github-username/your-gitops-repo # GitOps 리포지토리 주소로 변경
  KUBE_CONFIG_BRANCH: main # GitOps 리포지토리 브랜치

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    # Semgrep 정적 코드 분석
    - name: Run Semgrep SAST Scan
      uses: returntocorp/semgrep-action@v1
      with:
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }} # (선택 사항) Semgrep Cloud Platform 연동 시
        # publishDeployment: ${{ github.run_id }} # (선택 사항)
        # generateSarif: true # (선택 사항) GitHub Security 탭에 결과 표시
        config: p/default # 기본 규칙셋 사용 (또는 p/nodejsscan, p/expressjs 등)

    # Docker 이미지 빌드
    - name: Build Docker image
      run: |
        docker build -t $DOCKER_IMAGE_NAME:${{ github.sha }} .
        docker tag $DOCKER_IMAGE_NAME:${{ github.sha }} $DOCKER_IMAGE_NAME:latest

    # Trivy 이미지 취약점 분석
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '$DOCKER_IMAGE_NAME:${{ github.sha }}'
        format: 'table' # 또는 'sarif' (GitHub Security 탭에 결과 표시 시)
        exit-code: '0' # 취약점이 발견되어도 파이프라인을 중단하지 않음 (결과만 확인)
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH' # 심각도 높은 것만 스캔 (예시)

    # (배포 승인 단계 - 여기서는 개념적으로만 언급)
    # 실제 운영 환경에서는 Semgrep/Trivy 결과에 따라 수동 승인 또는 자동 중단 로직 추가 가능
    # 예: Slack 알림, GitHub Environments의 승인자 설정 등

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker push $DOCKER_IMAGE_NAME:${{ github.sha }}
        docker push $DOCKER_IMAGE_NAME:latest

  update-manifest: # CI 성공 후 GitOps 리포지토리 업데이트
    needs: build-and-analyze # build-and-analyze 작업 완료 후 실행
    runs-on: ubuntu-latest
    steps:
    - name: Checkout GitOps repository
      uses: actions/checkout@v3
      with:
        repository: ${{ env.KUBE_CONFIG_REPO }}
        token: ${{ secrets.GITOPS_REPO_TOKEN }} # GitOps 리포지토리에 쓸 수 있는 PAT
        ref: ${{ env.KUBE_CONFIG_BRANCH }}

    - name: Update Kubernetes manifest (Helm values)
      # kustomize, yq, sed 등 다양한 도구 사용 가능. 여기서는 Helm values.yaml을 직접 수정하는 예시
      # GitOps 리포지토리 내의 Helm 차트 values.yaml 파일 경로를 정확히 지정해야 합니다.
      run: |
        # 예시: ./helm-charts/my-node-app/values.yaml 파일의 image.tag 값을 변경
        # 실제 경로는 GitOps 리포지토리 구조에 맞게 수정
        sed -i "s|tag:.*|tag: ${{ github.sha }}|g" ./helm-charts/my-node-app/values.yaml
        # 또는 yq 사용 예시 (yq 설치 필요: sudo apt-get install yq)
        # yq e '.image.tag = "${{ github.sha }}"' -i ./helm-charts/my-node-app/values.yaml

    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        # 변경 사항이 있을 때만 커밋
        if ! git diff --staged --quiet; then
          git commit -m "Update image tag to ${{ github.sha }} for simple-node-app"
          git push
        else
          echo "No changes to commit."
        fi